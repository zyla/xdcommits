#!/bin/bash

# http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -euo pipefail
IFS=$'\n\t'

XDCOMMITS_ROOT=$(dirname $(readlink -f $0))

main() {
	sanity_check

	if [ "$#" -lt 1 ]; then
		print_usage
		exit 1
	fi

	local command=$1
	shift

	case $command in
		help)
			print_usage
			;;
		enable|capture|capturegif|disable|show|last)
			do_$command "$@"
			;;
		*)
			echo "Skąd znasz te prawdy? Nie z sztuki wróżenia!"
			echo $command
			exit 66
			;;
	esac
}

get_config() {
	local name="$1" default_value="$2"
	git config xdcommits.$name || echo $default_value
}

do_capture() {
	if [ "$(git config --bool xdcommits.fork)" != false ]; then
		really_capture &
	else
		really_capture
	fi
}

really_capture() {
	require_repo
	if [ -d "$(git rev-parse --git-dir)/rebase-merge" ]; then
		echo "Rebase in progress; Not capturing." >&2
		exit
	fi
	tmpdir=$(mktemp -d)
	trap 'rm -rf $tmpdir' EXIT
	annotate_and_save_image $(capture_frames $tmpdir 1)
}

do_capturegif() {
	require_repo
	tmpdir=$(mktemp -d)
	trap 'rm -rf $tmpdir' EXIT
	annotate_and_save_image $(capture_frames $tmpdir $(get_config gifFrames 5))
}

capture_frames() {
	tmpdir=$1
	frames_count=$2
	local settle_frames=$(get_config settleFrames 1)
	local application=$(get_config application mplayer)
	local filename

	if [ "$application" == "ffmpeg" ]; then
		filename=test.jpg
		if [ "$frames_count" -gt 1 ]; then filename=test.gif; fi
		ffmpeg -f video4linux2 -i /dev/video0 -r 15 -vframes $frames_count \
			$tmpdir/$filename > /dev/null 2>&1 ||\
			{ echo "ffmpeg fucked up!"; exit 1; }
		find $tmpdir -name $filename
	else
		mplayer tv:// -tv width=640:height=480:device=/dev/video0 -fps 15 \
			-frames $(( settle_frames + frames_count )) -vo jpeg:outdir=$tmpdir > /dev/null 2>&1 ||\
			{ echo "mplayer fucked up!"; exit 1; }
		find $tmpdir -name '*.jpg' | sort | tail -n $frames_count
	fi
}

annotate_and_save_image() {
	images=$*
	outdir=$(get_outdir)
	sha=$(git rev-parse --short=11 HEAD)
	if [ "$#" -gt 1 -o "gif" == $(echo basename $images | awk -F. '{print $NF}') ]; then
		filename=$outdir/${sha}.gif
	else
		filename=$outdir/${sha}.jpg
	fi
	commit_msg=$(git log --no-walk --format=%s)
	font=$XDCOMMITS_ROOT/Impact.ttf
	hour=$(date -d "$(git log --no-walk --format=%cD --date=iso8601)" +%H:%M)
	convert $images \
		-font $font \
		-strokewidth 2 -stroke black -fill white \
		-pointsize 48 -gravity southwest -annotate 0 "$commit_msg" \
		-pointsize 24 -gravity northeast -annotate 0 "$sha" \
		-pointsize 24 -gravity northwest -annotate 0 "$hour" \
		-layers Optimize \
		$filename
}

get_outdir() {
	name=$(basename $(get_toplevel))
	outdir=$(get_config targetDir $HOME/.lolcommits)/$name
	mkdir -p $outdir
	echo $outdir
}

do_enable() {
	local git_dir
	if [ "$#" -gt 0 ]; then
		if [ "$1" = "-g" ]; then
			git_dir=/usr/share/git-core/templates
		else
			print_usage
			exit 1
		fi
	else
		require_repo
		git_dir=$(git rev-parse --git-dir)
	fi
	enable_hook $git_dir/hooks/post-commit
	exit 1
}

enable_hook() {
	local hook="$1"

	if [ ! -f "$hook" ]; then
		[ -w $(dirname $hook) ] || die "Can't write to $hook"
		echo "Writing $hook:"
		echo -e "#!/bin/sh\nxdcommits capture" | tee $hook
		chmod +x $hook
	else
		[ -w $hook ] || die "Can't write to $hook"
		grep -q -F 'xdcommits capture' $hook && die "Already enabled on $hook"
		echo "Enabling xdcommits on $hook"
		sed -i '2s/^/xdcommits capture\n/' $hook
	fi
}

do_disable() {
	die "I ain't no scipp editor! Do it yourself."
}

do_show() {
	require_repo
	sha=$(git rev-parse --short=11 HEAD)
	filename=$(find $(get_outdir) -name ${sha}'.*' | head -1)
	if [ ! -f "$filename" ]; then
		echo "Not captured yet!"
		exit 1
	fi
	exec $(get_config imageViewer feh) $filename
}

do_last() {
	require_repo
	local sha=$(git rev-parse --short=11 HEAD)
	local outDir=$(get_outdir)
	filename=$(find $outDir -name ${sha}'.*' | head -1)
	if [ ! -f "$filename" ]; then
		echo "Image for ${sha} was not found in ${outDir}"
		exit 1
	fi
	echo $filename
}

die() {
	echo "$@"
	exit 1
}

print_usage() {
cat <<EOF
Usage: xdcommits <command> [options]

  xdcommits help        print this message
  xdcommits enable      install hook in current repository
  xdcommits enable -g   install hook in Git template (requires write access to /usr/share/git-core/templates)
  xdcommits capture     record your ugly face
  xdcommits show        display xdcommit of current commit

EOF
}

require_repo() {
	get_toplevel > /dev/null || exit 1
}

get_toplevel() {
	git rev-parse --show-toplevel
}

sanity_check() {
	local required_files="Impact.ttf"

	for file in $required_files; do
		if [ ! -f $XDCOMMITS_ROOT/$file ]; then
			echo "Missing file: $file"
			echo "Did you install xdcommits properly?"
			exit 1
		fi
	done

	for prog in convert; do
		if [ ! -x "$(which $prog)" ]; then
			echo "ERROR: '$prog' is required."
			exit 1
		fi
	done
    if [ ! -x "$(which ffmpeg)" ] && [ ! -x "$(which mplayer)" ]; then
        echo "ERROR: either mplayer or ffmpeg are required."
        exit 1
    fi
}

main "$@"
